basePath: /
host: localhost:3000
info:
  contact:
    email: fiber@swagger.io
    name: API Support
  description: This is a sample swagger for Fiber
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Fiber Example API
  version: "1.0"
paths:
  /:
    get:
      consumes:
      - '*/*'
      description: Renders views/index.html with injected data
      produces:
      - text/html
      responses:
        "200":
          description: OK
      summary: Render an index.html page
      tags:
      - root
  /api/spotify:
    get:
      consumes:
      - '*/*'
      description: Returns a version number
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Spotify API index route
      tags:
      - spotify
  /api/spotify/authenticate:
    get:
      consumes:
      - '*/*'
      description: First step in the OAuth flow. Sets a cookie on `spotify_auth_state`
        (SpotifyStateKey) to read later, builds a URL with OAuth config in query params
        and redirects to the Spotify-hosted OAuth service
      responses:
        "302":
          description: Found
      summary: Begins Spotify OAuth token exchange for user to accept permissions
      tags:
      - spotify
  /api/spotify/callback:
    get:
      consumes:
      - '*/*'
      description: Following BeginOAuth we get accessToken and refreshToken and write
        to db
      responses:
        "200":
          description: OK
      summary: Uses the `req.query.code` sent after SpotifyBeginOauth for authorization_code
        flow
      tags:
      - spotify
  /api/spotify/currently-playing:
    get:
      consumes:
      - '*/*'
      description: |-
        GET https://api.spotify.com/v1/me/player/currently-playing
        * For currently playing music tracks, this endpoint responds in JSON with a currently playing `Track` as `item`.
        * For currently playing podcasts, this endpoint responds in JSON with `{ "is_playing": "true, "item", nil, "currently_playing_type": "episode" }`. Spotify's API doesn't provide any episode data.
        * When not currently listening, this endpoint responds in JSON with `{ "is_playing": false, "item": nil }`.
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Get Currently playing track from Spotify
      tags:
      - spotify
  /api/spotify/recently-played:
    get:
      consumes:
      - '*/*'
      description: GET api.spotify.com/v1/me/player/recently-played. Sends back array
        of tracks.
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Get recently played tracks by user from Spotify Web API
      tags:
      - spotify
  /api/spotify/top/{type}:
    get:
      consumes:
      - '*/*'
      description: |-
        GET https://api.spotify.com/v1/me/top/:type.
        * Responds with `items` in JSON representing a list of artists or tracks.
      parameters:
      - description: Type of item to get, either `artists` or `tracks`
        in: path
        name: type
        required: true
        type: string
      - description: 'Time range to query for top items, either `short_term`, `medium_term`,
          or `long_term` (default: `medium_term`)'
        in: query
        name: time_range
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Get top items by type (artists or tracks)
      tags:
      - spotify
swagger: "2.0"
