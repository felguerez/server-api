// Code generated by swaggo/swag. DO NOT EDIT.

package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/": {
            "get": {
                "description": "Renders views/index.html with injected data",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "text/html"
                ],
                "tags": [
                    "root"
                ],
                "summary": "Render an index.html page",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api": {
            "get": {
                "description": "GET api.spotify.com/v1/me/player/currently-playing\nResponds with",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "spotify"
                ],
                "summary": "Get Currently playing track from Spotify",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/spotify": {
            "get": {
                "description": "Returns a version number",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "spotify"
                ],
                "summary": "Spotify API index route",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/spotify/authenticate": {
            "get": {
                "description": "First step in the OAuth flow. Sets a cookie on ` + "`" + `spotify_auth_state` + "`" + ` (SpotifyStateKey) to read later, builds a URL with OAuth config in query params and redirects to the Spotify-hosted OAuth service",
                "consumes": [
                    "*/*"
                ],
                "tags": [
                    "spotify"
                ],
                "summary": "Begins Spotify OAuth token exchange for user to accept permissions",
                "responses": {
                    "302": {
                        "description": "Found"
                    }
                }
            }
        },
        "/api/spotify/callback": {
            "get": {
                "description": "Following BeginOAuth we get accessToken and refreshToken and write to db",
                "consumes": [
                    "*/*"
                ],
                "tags": [
                    "spotify"
                ],
                "summary": "Uses the ` + "`" + `req.query.code` + "`" + ` sent after SpotifyBeginOauth for authorization_code flow",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/spotify/recently-played": {
            "get": {
                "description": "GET api.spotify.com/v1/me/player/recently-played. Sends back array of tracks",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "spotify"
                ],
                "summary": "Get recently played tracks by user from Spotify Web API",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
