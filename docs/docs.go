// Code generated by swaggo/swag. DO NOT EDIT.

package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "email": "fiber@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/": {
            "get": {
                "description": "Renders views/index.html with injected data",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "text/html"
                ],
                "tags": [
                    "root"
                ],
                "summary": "Render an index.html page",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/spotify": {
            "get": {
                "description": "Returns a version number",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "spotify"
                ],
                "summary": "Spotify API index route",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/spotify/authenticate": {
            "get": {
                "description": "First step in the OAuth flow. Sets a cookie on ` + "`" + `spotify_auth_state` + "`" + ` (SpotifyStateKey) to read later, builds a URL with OAuth config in query params and redirects to the Spotify-hosted OAuth service",
                "consumes": [
                    "*/*"
                ],
                "tags": [
                    "spotify"
                ],
                "summary": "Begins Spotify OAuth token exchange for user to accept permissions",
                "responses": {
                    "302": {
                        "description": "Found"
                    }
                }
            }
        },
        "/api/spotify/callback": {
            "get": {
                "description": "Following BeginOAuth we get accessToken and refreshToken and write to db",
                "consumes": [
                    "*/*"
                ],
                "tags": [
                    "spotify"
                ],
                "summary": "Uses the ` + "`" + `req.query.code` + "`" + ` sent after SpotifyBeginOauth for authorization_code flow",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/spotify/currently-playing": {
            "get": {
                "description": "GET https://api.spotify.com/v1/me/player/currently-playing\n* For currently playing music tracks, this endpoint responds in JSON with a currently playing ` + "`" + `Track` + "`" + ` as ` + "`" + `item` + "`" + `.\n* For currently playing podcasts, this endpoint responds in JSON with ` + "`" + `{ \"is_playing\": \"true, \"item\", nil, \"currently_playing_type\": \"episode\" }` + "`" + `. Spotify's API doesn't provide any episode data.\n* When not currently listening, this endpoint responds in JSON with ` + "`" + `{ \"is_playing\": false, \"item\": nil }` + "`" + `.",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "spotify"
                ],
                "summary": "Get Currently playing track from Spotify",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/spotify/recently-played": {
            "get": {
                "description": "GET api.spotify.com/v1/me/player/recently-played. Sends back array of tracks.",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "spotify"
                ],
                "summary": "Get recently played tracks by user from Spotify Web API",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/spotify/top/{type}": {
            "get": {
                "description": "GET https://api.spotify.com/v1/me/top/:type.\n* Responds with ` + "`" + `items` + "`" + ` in JSON representing a list of artists or tracks.",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "spotify"
                ],
                "summary": "Get top items by type (artists or tracks)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Type of item to get, either ` + "`" + `artists` + "`" + ` or ` + "`" + `tracks` + "`" + `",
                        "name": "type",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Time range to query for top items, either ` + "`" + `short_term` + "`" + `, ` + "`" + `medium_term` + "`" + `, or ` + "`" + `long_term` + "`" + ` (default: ` + "`" + `medium_term` + "`" + `)",
                        "name": "time_range",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:3000",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Fiber Example API",
	Description:      "This is a sample swagger for Fiber",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
